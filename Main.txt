-- Serviços
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Remote com verificação de segurança
local Remote = ReplicatedStorage:FindFirstChild("RE") and ReplicatedStorage.RE:FindFirstChild("1Gu1n")

-- Lista de palavras-chave
local keywords = {
    "lava prato",
    "lava pratos",
    "lava louça"
}

-- Variáveis para controle do bug
local bugAtivo = false
local targetPlayer = nil
local bugConnection = nil

-- Função para checar se a mensagem contém alguma palavra-chave
local function containsKeyword(message)
    message = message:lower()
    for _, keyword in ipairs(keywords) do
        if message:find(keyword) then
            return true
        end
    end
    return false
end

-- Função para teleportar o LocalPlayer até outro jogador
local function teleportToPlayer(player)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local targetChar = player.Character
    if character and targetChar and targetChar:FindFirstChild("HumanoidRootPart") then
        local hrp = character:WaitForChild("HumanoidRootPart")
        hrp.CFrame = targetChar.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0) -- 3 studs acima do jogador
    end
end

-- Função para parar o bug
local function pararBug()
    if bugConnection then
        bugConnection:Disconnect()
        bugConnection = nil
    end
    bugAtivo = false
    targetPlayer = nil
end

-- Função para ativar o bug em um jogador específico
local function ativarBugNoPlayer(player)
    if not Remote then
        warn("Remote não encontrado. Abortando.")
        return
    end
    
    if bugAtivo then
        print("Parando bug anterior...")
        pararBug()
    end
    
    targetPlayer = player
    bugAtivo = true
    
    print("Ativando bug no jogador: " .. player.Name)
    
    bugConnection = RunService.Stepped:Connect(function()
        if not bugAtivo then return end
        if not targetPlayer or not targetPlayer.Character then return end
        
        local target = targetPlayer
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local crazyVector = Vector3.new(
                math.random(1e14, 1e15),
                math.random(1e14, 1e15),
                math.random(1e14, 1e15)
            )
            
            local args = {
                [1] = target.Character.HumanoidRootPart,
                [2] = target.Character.HumanoidRootPart,
                [3] = crazyVector,
                [4] = target.Character.HumanoidRootPart.Position,
                [5] = LocalPlayer.Backpack:FindFirstChild("Assault") and LocalPlayer.Backpack.Assault:FindFirstChild("GunScript_Local") and LocalPlayer.Backpack.Assault.GunScript_Local:FindFirstChild("MuzzleEffect"),
                [6] = LocalPlayer.Backpack:FindFirstChild("Assault") and LocalPlayer.Backpack.Assault:FindFirstChild("GunScript_Local") and LocalPlayer.Backpack.Assault.GunScript_Local:FindFirstChild("HitEffect"),
                [7] = 0,
                [8] = 0,
                [9] = { [1] = false },
                [10] = {
                    [1] = 25,
                    [2] = Vector3.new(100, 100, 100),
                    [3] = BrickColor.new(29),
                    [4] = 0.25,
                    [5] = Enum.Material.SmoothPlastic,
                    [6] = 0.25
                },
                [11] = true,
                [12] = false
            }
            
            Remote:FireServer(unpack(args))
        end
    end)
end

-- Função principal executada quando as palavras-chave são detectadas
local function onKeywordDetected(player)
    print("Palavra-chave detectada de: " .. player.Name)
    
    -- Teleporta até o jogador
    teleportToPlayer(player)
    
    -- Aplica o bug especificamente nesse jogador
    ativarBugNoPlayer(player)
end

-- Conectar função ao chat para novos jogadores
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        if containsKeyword(message) then
            onKeywordDetected(player)
        end
    end)
end)

-- Para os jogadores já no servidor
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        player.Chatted:Connect(function(message)
            if containsKeyword(message) then
                onKeywordDetected(player)
            end
        end)
    end
end

-- Função para parar manualmente o bug (opcional)
local function stopSystem()
    pararBug()
    print("Sistema de bug parado")
end

-- Comando para parar o sistema (descomente se quiser usar)
LocalPlayer.Chatted:Connect(function(message)
    if message:lower() == "/parar" or message:lower() == "/stop" then
        stopSystem()
    end
end)

print("Sistema ativado! Digite '/parar' para parar o bug manualmente.")
